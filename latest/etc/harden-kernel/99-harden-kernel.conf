# mitigate kernel pointer leaks
kernel.kptr_restrict=2

# restrict kernel log
kernel.dmesg_restrict=1

# further prevent kernel information leaks during boot
kernel.printk=3 3 3 3

# restrict eBPF, enable JIT hardening techniques 
kernel.unprivileged_bpf_disabled=1
net.core.bpf_jit_harden=2

# restrict TTY line loading disciplines
dev.tty.ldisc_autoload=0

# restrict userfaultfd() to avoid use-after-free flaws
# COMMENTED: usefaultfd is not enabled
#wm.unprivileged_userfaultfd=0

# restricts booting another kernel during runtime
kernel.kexec_load_disabled=1

# disable SysRq key
kernel.sysrq=0

# unprivileged sandboxing restricted
kernel.unprivileged_userns_clone=0

# restrict usage of performance events

kernel.perf_event_paranoid=2
# protection against SYN flood attacks
net.ipv4.tcp_syncookies=1

# protection against time-wait assassination
net.ipv4.tcp_rfc1337=1

# enable source validation of packets from all interfaces
net.ipv4.conf.all.rp_filter=1
net.ipv4.conf.default.rp_filter=1

# disable ICMP redirect acceptance and sending, MITM attack
net.ipv4.conf.all.accept_redirects=0
net.ipv4.conf.default.accept_redirects=0
net.ipv4.conf.all.secure_redirects=0
net.ipv4.conf.default.secure_redirects=0
net.ipv6.conf.all.accept_redirects=0
net.ipv6.conf.default.accept_redirects=0
net.ipv4.conf.all.send_redirects=0
net.ipv4.conf.default.send_redirects=0

# ignore ICMP requests, avoid Smurf attacks, makes timestamp fingerprinting more difficult
net.ipv4.icmp_echo_ignore_all=1
net.ipv6.icmp.echo_ignore_all=1

## Ignores bogus ICMP error responses
net.ipv4.icmp_ignore_bogus_error_responses=1

# disabling network traffic redirects by source routing
net.ipv4.conf.all.accept_source_route=0
net.ipv4.conf.default.accept_source_route=0
net.ipv6.conf.all.accept_source_route=0
net.ipv6.conf.default.accept_source_route=0

# disable IPv6 router advertisements
net.ipv6.conf.all.accept_ra=0
net.ipv6.conf.default.accept_ra=0

# disable TCP SACK as it is commonly exploited and likely not needed
net.ipv4.tcp_sack=0
net.ipv4.tcp_dsack=0
net.ipv4.tcp_fack=0

## disable IPv4 TCP Timestamps
net.ipv4.tcp_timestamps=0

# log martians
net.ipv4.conf.default.log_martians=1
net.ipv4.conf.all.log_martians=1

# restrict ptrace
# This might break some programs running under WINE.
## A workaround for WINE would be to give the wineserver and wine-preloader ptrace capabilities. This can be done by running:
##
## sudo apt-get install libcap2-bin
## sudo setcap cap_sys_ptrace=eip /usr/bin/wineserver
## sudo setcap cap_sys_ptrace=eip /usr/bin/wine-preloader
kernel.yama.ptrace_scope=2

# restrict symlink creation
fs.protected_symlinks=1
fs.protected_hardlinks=1

# prevent file creating in world-writable directories,
# make data spoofing attacks more difficult
fs.protected_fifos=2
fs.protected_regular=2

# prevent core dumps
fs.suid_dumpable=0

# further prevent core dumps
kernel.core_pattern=|/bin/false

# other Lynis specified
kernel.core_uses_pid=1

## Randomize the addresses for mmap base, heap, stack, and VDSO pages
kernel.randomize_va_space=2

## Disable asynchronous I/O for all processes.
## Valid only for linux kernel version >= 6.6.
kernel.io_uring_disabled=2

## Restrict the userfaultfd() syscall to root as it can make heap sprays
## easier
vm.unprivileged_userfaultfd=0

## Let the kernel only swap if it is absolutely necessary
vm.swappiness=1

## Disallow kernel profiling by users without CAP_SYS_ADMIN
kernel.perf_event_paranoid=3

